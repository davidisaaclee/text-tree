(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = peg$FAILED,
        peg$c2 = /^[^`]/,
        peg$c3 = { type: "class", value: "[^`]", description: "[^`]" },
        peg$c4 = function(text) {
            return {
              type: "literal",
              text: text.join(""),
              index: nextIndex('piece'),
              literalIndex: nextIndex('literal')
            };
          },
        peg$c5 = "`",
        peg$c6 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c7 = /^[a-z]/i,
        peg$c8 = { type: "class", value: "[a-z]i", description: "[a-z]i" },
        peg$c9 = "-",
        peg$c10 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c11 = function(text) {
            return {
              type: "hole",
              identifier: text.join(""),
              index: nextIndex('piece'),
              holeIndex: nextIndex('hole')
            };
          },
        peg$c12 = "*`",
        peg$c13 = { type: "literal", value: "*`", description: "\"*`\"" },
        peg$c14 = function(text) {
            return {
              type: 'variadic',
              identifier: text.join(""),
              index: nextIndex('piece'),
              holeIndex: nextIndex('hole')
            };
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parselit();
      if (s1 === peg$FAILED) {
        s1 = peg$parsehole();
        if (s1 === peg$FAILED) {
          s1 = peg$parsevar();
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parselit();
        if (s1 === peg$FAILED) {
          s1 = peg$parsehole();
          if (s1 === peg$FAILED) {
            s1 = peg$parsevar();
          }
        }
      }

      return s0;
    }

    function peg$parselit() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c2.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c4(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehole() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c7.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c9;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c9;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c11(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsevar() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c5;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c7.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s3 = peg$c9;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c9;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s3 = peg$c12;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c14(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }


      var indices = {};
      function nextIndex (kind) {
        if (indices[kind] == null) {
          indices[kind] = 0
        }
        return indices[kind]++
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

},{}],2:[function(require,module,exports){

/* text-tree
 */
var TextTree, parseTemplate,
  slice = [].slice;

parseTemplate = (require('grammar-parser')).parse;

TextTree = Polymer({
  is: 'text-tree',
  properties: {
    treeModel: Object
  },
  navigate: function(path, useNumericPath) {
    return this.walk(path, {
      endFn: function(x) {
        return x;
      },
      useNumericPath: useNumericPath
    });
  },
  getNthChild: function(index) {
    var branchNode, holes, ref;
    branchNode = Polymer.dom(this.root).querySelector('.branch');
    holes = Polymer.dom(branchNode).childNodes.filter(function(elm) {
      var ref;
      return (ref = elm.classList) != null ? ref.contains('hole') : void 0;
    });
    if (holes != null) {
      return (ref = holes[index]) != null ? ref.querySelector('text-tree') : void 0;
    } else {
      return null;
    }
  },
  getChild: function(id) {
    var branchNode, child, j, len, ref;
    branchNode = Polymer.dom(this.root).querySelector('.branch');
    ref = Polymer.dom(branchNode).children;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      if (child.classList.contains('hole')) {
        if (child.holeId === id) {
          return child.querySelector('text-tree');
        }
      }
    }
  },
  walk: function(path, options) {
    var hd, nextChild, ref, tl;
    hd = path[0], tl = 2 <= path.length ? slice.call(path, 1) : [];
    nextChild = (function(_this) {
      return function() {
        if (options.useNumericPath) {
          return _this.getNthChild(hd);
        } else {
          return _this.getChild(hd);
        }
      };
    })(this)();
    if (nextChild == null) {
      return null;
    }
    if (((ref = options.fold) != null ? ref.proc : void 0) != null) {
      options.fold.acc = options.fold.proc(options.fold.acc, nextChild);
    }
    if (tl.length === 0) {
      if (options.endFn != null) {
        return options.endFn(nextChild);
      } else {
        return nextChild;
      }
    } else {
      return nextChild.walk(tl, options);
    }
  },
  _isEqual: function(a, b) {
    return a === b;
  },
  _createBranchElements: function(model) {
    var children, holeCount, idPath, numericPath, result, template;
    console.log(model);
    numericPath = model.numericPath != null ? model.numericPath : [];
    idPath = model.idPath != null ? model.idPath : [];
    if (model.type === 'empty') {
      return [
        {
          type: 'empty',
          numericPath: numericPath,
          idPath: idPath
        }
      ];
    } else if (model.type === 'branch') {
      children = model.children != null ? model.children : [];
      template = parseTemplate(model.template);
      result = [];
      holeCount = 0;
      template.forEach(function(elm, idx) {
        var i, j, myIdPath, myNumericPath, ref, ref1, results, subhole;
        switch (elm.type) {
          case 'hole':
            myNumericPath = slice.call(numericPath).concat([holeCount]);
            myIdPath = slice.call(idPath).concat([elm.identifier]);
            elm.value = children[holeCount];
            elm.numericPath = myNumericPath;
            elm.idPath = myIdPath;
            elm.value.numericPath = myNumericPath;
            elm.value.idPath = myIdPath;
            result.push(elm);
            return holeCount++;
          case 'variadic':
            results = [];
            for (i = j = ref = holeCount, ref1 = children.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
              subhole = {
                type: 'hole',
                identifier: elm.identifier + "-" + i,
                index: elm.index + (i - holeCount),
                holeIndex: holeCount
              };
              myNumericPath = slice.call(numericPath).concat([i]);
              myIdPath = slice.call(idPath).concat([subhole.identifier]);
              subhole.value = children[i];
              subhole.numericPath = myNumericPath;
              subhole.idPath = myIdPath;
              subhole.value.numericPath = myNumericPath;
              subhole.value.idPath = myIdPath;
              result.push(subhole);
              results.push(holeCount++);
            }
            return results;
            break;
          default:
            return result.push(elm);
        }
      });
      return result;
    } else {
      return console.log('Unrecognized node model type: ', model.type);
    }
  },
  _touchDownHole: function(evt, detail) {},
  _requestFill: function(evt, detail) {
    var nodeModel;
    evt.stopPropagation();
    nodeModel = evt.model.item;
    return this.fire('request-fill', {
      idPath: nodeModel.idPath,
      numericPath: nodeModel.numericPath,
      nodeModel: nodeModel,
      sender: this
    });
  }
});

},{"grammar-parser":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
